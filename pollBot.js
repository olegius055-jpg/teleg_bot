const { Telegraf, Markup } = require("telegraf");
const moment = require("moment"); // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
moment.locale("ru");
const bot = new Telegraf("8016112503:AAFJEUKvE-LYtmd4AJCw_YgbtfyRqdbRvbU");
const GROUP_CHAT_ID = -1002937296294;

const selectedDates = new Set();
const userData = {};

bot.command("getid", (ctx) => {
  ctx.reply(`ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: ${ctx.chat.id}`);
});

bot.telegram.setMyCommands([
  { command: "start", description: "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—ã" },
  { command: "calendar", description: "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å" },
  { command: "reset", description: "–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã" },
  { command: "help", description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É" },
]);

bot.command("calendar", (ctx) => {
  const now = moment();
  userData[ctx.from.id] = {
    selected: new Set(),
    year: now.year(),
    month: now.month(),
  };
  ctx.reply(
    "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞:",
    generateCalendar(now.year(), now.month())
  );
});

bot.command("reset", (ctx) => {
  userData[ctx.from.id] = { selected: new Set() };
  ctx.reply("üîÑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã.");
});

bot.command("help", (ctx) => {
  ctx.reply(
    "üß≠ –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/calendar ‚Äî –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã\n/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—ã"
  );
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
function generateCalendar(year, month, selected = new Set()) {
  const start = moment([year, month]);
  const end = moment(start).endOf("month");
  const monthName = start.format("MMMM YYYY"); // –Ω–∞–ø—Ä–∏–º–µ—Ä: –û–∫—Ç—è–±—Ä—å 2025

  const weeks = [];

  // 1Ô∏è‚É£ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
  weeks.push([Markup.button.callback(`üìÖ ${monthName}`, "noop")]);

  // 2Ô∏è‚É£ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
  const weekDays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
  weeks.push(weekDays.map((d) => Markup.button.callback(d, "noop")));

  // 3Ô∏è‚É£ –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
  let week = [];
  for (let i = 1; i < start.isoWeekday(); i++) {
    week.push(Markup.button.callback(" ", "noop"));
  }

  // 4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
  for (let i = 1; i <= end.date(); i++) {
    const today = moment().format('YYYY-MM-DD');
    const day = moment([year, month, i]);
    const dateStr = day.format("YYYY-MM-DD");
    const label = selected.has(dateStr)
      ? `‚úÖ${day.format("D")}`
      : dateStr === today
      ? `üîπ${day.format("D")}`
      : day.format("D");
    week.push(Markup.button.callback(label, `date_${dateStr}`));

    // –µ—Å–ª–∏ –Ω–µ–¥–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –¥–µ–Ω—å –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    if (day.isoWeekday() === 7 || i === end.date()) {
      // 5Ô∏è‚É£ –¥–æ–±–∏–≤–∞–µ–º –Ω–µ–¥–µ–ª—é –¥–æ 7 –¥–Ω–µ–π –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
      while (week.length < 7) {
        week.push(Markup.button.callback(" ", "noop"));
      }
      weeks.push(week);
      week = [];
    }
  }

  // 6Ô∏è‚É£ –ù–∞–≤–∏–≥–∞—Ü–∏—è + –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"
  const controls = [
    [
      Markup.button.callback("‚óÄÔ∏è", `month_${year}_${month - 1}`),
      Markup.button.callback("‚ñ∂Ô∏è", `month_${year}_${month + 1}`),
    ],
  ];

  if (selected.size >= 2) {
    controls.unshift([
      Markup.button.callback("üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", "create_poll"),
    ]);
  }

  return Markup.inlineKeyboard([...weeks, ...controls]);
}

// === /start ===
bot.start((ctx) => {
  const now = moment();
  userData[ctx.from.id] = {
    selected: new Set(),
    year: now.year(),
    month: now.month(),
  };

  ctx.reply(
    "üé≤ –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–∞—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞ –æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ:",
    generateCalendar(now.year(), now.month())
  );
});

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ ===
bot.action(/month_(\d+)_(\-?\d+)/, async (ctx) => {
  const id = ctx.from.id;
  const user = userData[id];
  if (!user) return;

  let year = parseInt(ctx.match[1]);
  let month = parseInt(ctx.match[2]);

  if (month < 0) {
    month = 11;
    year -= 1;
  }
  if (month > 11) {
    month = 0;
    year += 1;
  }

  user.year = year;
  user.month = month;

  await ctx.editMessageReplyMarkup(
    generateCalendar(year, month, user.selected).reply_markup
  );
});

// === –í—ã–±–æ—Ä –¥–∞—Ç—ã ===
bot.action(/date_(\d{4}-\d{2}-\d{2})/, async (ctx) => {
  const id = ctx.from.id;
  const user = userData[id];
  if (!user) return;

  const date = ctx.match[1];
  if (user.selected.has(date)) {
    user.selected.delete(date); // –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Äî –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
  } else {
    user.selected.add(date);
  }

  await ctx.editMessageReplyMarkup(
    generateCalendar(user.year, user.month, user.selected).reply_markup
  );
});

// === –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ===
bot.action("create_poll", async (ctx) => {
  const id = ctx.from.id;
  const user = userData[id];
  if (!user || user.selected.size < 2)
    return ctx.answerCbQuery("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –¥–∞—Ç—ã!");

  user.awaitingTitle = true;
  await ctx.reply(
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"–ü–æ–∫–æ—Ä–µ–Ω–∏–µ –°–µ–≤–µ—Ä–Ω–æ–π –≥–æ—Ä—ã. –ö–æ–≥–¥–∞ –∏–≥—Ä–∞–µ–º?"'
  );
});

// === –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è ===
bot.on("text", async (ctx) => {
  const id = ctx.from.id;
  const user = userData[id];
  if (!user || !user.awaitingTitle) return;

  const title = ctx.message.text.trim();
  if (!title) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!");

  const options = Array.from(user.selected)
    .sort()
    .map((d) => moment(d).format("D MMMM (ddd)"));

  await ctx.telegram.sendPoll(GROUP_CHAT_ID, title, options, {
    is_anonymous: false,
  });

  await ctx.reply(`‚úÖ –û–ø—Ä–æ—Å "${title}" —Å–æ–∑–¥–∞–Ω!`);

  // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  delete userData[id];
});

// === –ó–∞–ø—É—Å–∫ ===
bot.launch();
console.log("üéÆ –ë–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–ø—É—â–µ–Ω!");
